{
	"__schema" : "4.1",
	"__type" : "page",
	"children" : {
		"__type" : "snippets",
		"items" : [
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-01-14T13:48:25.016784+01:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-01-14T13:48:26.839009+01:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "wJW4gJquDQCmQXueAOtkHw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "There are three scopes default, one and two. default always exists and is what is used when there is no scope specified on the token. one is defined with %scopes so it is like default and includes everything where no scope is specified. two is defined by %excludes and only includes tokens where that is specified. All tokens defined by keywords \" \" are included by in all scopes:"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-01-14T13:48:30.021+01:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-01-14T13:49:04.694806+01:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "LvEEgZquDQCmUE03AOtkHw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "```llanguage=SmaCC\n%scopes default one;\n%excludes two;\n<a> : a ;\none <b> : b ;\ntwo <c> : c ;\nStart \n    : \"0\" Abcd\n    | SwitchToOne \"1\" Abcd\n    | SwitchToTwo \"2\" Abcd\n    ;\nAbcd\n    : (<a> | <b> | <c> | \"d\")+\n    ;\nSwitchToTwo\n    : [self scope: #two]\n    ;\nSwitchToOne\n    : [self scope: #one]\n    ;\n```"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-01-14T13:48:32.933814+01:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-01-14T13:48:32.933814+01:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "GWMxgZquDQCmYgE+AOtkHw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Given that definition we can parse these strings 0ad, 1abd, and 2cd. One important part of the grammar is the code that switches scopes. It needs to be performed before the grammar specifies the token that switches scopes since the parser has one token lookahead (i.e., SwitchToOne has to come before \"1\" and not after)."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-01-14T13:48:34.6658+01:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-01-14T13:48:34.6658+01:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "5dFLgZquDQCmccWHAOtkHw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Scopes by themselves can't solve the parentheses in the urls problem. The problem there is that the ending character of the url is ), so we don't know if the ) is part of the url or the character marking the end of the url. You might want to say that it should accept balanced (), but you can't accept that with the scanner as it only allows regular expressions. We could accept the balanced () with the parser, but that makes things more complicated and we would need scopes for that. Basically, we would need a scope that had a token for valid characters that weren't () and tokens for ( and )."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-01-14T13:48:23.704499+01:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-01-14T13:49:22.185651+01:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "B8mNgJquDQCmOm4ZAOtkHw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "One option is to use space as the end character."
			}
		]
	},
	"createEmail" : {
		"__type" : "email",
		"emailString" : "<unknown>"
	},
	"createTime" : {
		"__type" : "time",
		"time" : {
			"__type" : "dateAndTime",
			"dateAndTimeString" : "2023-01-14T13:48:22.168468+01:00"
		}
	},
	"editEmail" : {
		"__type" : "email",
		"emailString" : "<unknown>"
	},
	"editTime" : {
		"__type" : "time",
		"time" : {
			"__type" : "dateAndTime",
			"dateAndTimeString" : "2023-01-14T13:48:22.168468+01:00"
		}
	},
	"pageType" : {
		"__type" : "namedPage",
		"title" : "SmaCC scopes"
	},
	"uid" : {
		"__type" : "uuid",
		"uuid" : "2c238d80-9aae-0d00-a639-48a500eb641f"
	}
}